// <auto-generated />
using System;
using Infrastrcture.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastrcture.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20231221101505_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Actor", b =>
                {
                    b.Property<int>("ActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActId"));

                    b.Property<DateTime>("ActDob")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Domain.Models.Directors", b =>
                {
                    b.Property<int>("DirId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirId"));

                    b.Property<DateTime>("DirDob")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DirId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("Domain.Models.Genres", b =>
                {
                    b.Property<int>("GenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenId"));

                    b.Property<string>("GenTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Domain.Models.Movie", b =>
                {
                    b.Property<int>("MovId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovId"));

                    b.Property<DateTime>("MovDtRel")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovLang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovRelCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovTime")
                        .HasColumnType("int");

                    b.Property<string>("MovTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovYear")
                        .HasColumnType("int");

                    b.HasKey("MovId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Domain.Models.Movie_Cast", b =>
                {
                    b.Property<int>("ActId")
                        .HasColumnType("int");

                    b.Property<int>("MovId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActId", "MovId");

                    b.HasIndex("MovId");

                    b.ToTable("MovieCast");
                });

            modelBuilder.Entity("Domain.Models.Movie_Direction", b =>
                {
                    b.Property<int>("DirId")
                        .HasColumnType("int");

                    b.Property<int>("MovId")
                        .HasColumnType("int");

                    b.HasKey("DirId", "MovId");

                    b.HasIndex("MovId");

                    b.ToTable("MovieDirection");
                });

            modelBuilder.Entity("Domain.Models.Movie_Genres", b =>
                {
                    b.Property<int>("MovId")
                        .HasColumnType("int");

                    b.Property<int>("GenId")
                        .HasColumnType("int");

                    b.HasKey("MovId", "GenId");

                    b.HasIndex("GenId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("Domain.Models.Rating", b =>
                {
                    b.Property<int>("MovId")
                        .HasColumnType("int");

                    b.Property<int>("RevId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfRating")
                        .HasColumnType("int");

                    b.Property<int>("RevStars")
                        .HasColumnType("int");

                    b.HasKey("MovId", "RevId");

                    b.HasIndex("RevId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Domain.Models.Reviewer", b =>
                {
                    b.Property<int>("RevId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RevId"));

                    b.Property<string>("RevAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RevDob")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevPincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RevId");

                    b.ToTable("Reviewers");
                });

            modelBuilder.Entity("Domain.Models.Movie_Cast", b =>
                {
                    b.HasOne("Domain.Models.Actor", "Actor")
                        .WithMany("Movies")
                        .HasForeignKey("ActId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Models.Movie_Direction", b =>
                {
                    b.HasOne("Domain.Models.Directors", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Movie", "Movie")
                        .WithMany("Directors")
                        .HasForeignKey("MovId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Models.Movie_Genres", b =>
                {
                    b.HasOne("Domain.Models.Genres", "Genres")
                        .WithMany("Movies")
                        .HasForeignKey("GenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genres");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Models.Rating", b =>
                {
                    b.HasOne("Domain.Models.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Reviewer", "Reviewer")
                        .WithMany("Ratings")
                        .HasForeignKey("RevId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Domain.Models.Actor", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Domain.Models.Directors", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Domain.Models.Genres", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Domain.Models.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Directors");

                    b.Navigation("Genres");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Domain.Models.Reviewer", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
